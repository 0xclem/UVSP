package persistance;
import metier.*;
import java.sql.*;
import java.util.ArrayList;

/**
 * Classe permettant de mapper les objets Matiere vers la table matière de la base de données.
 * Cette classe hérite de la classe DAO.
 * @authors Ahardane Abdeslam, Balestrat Clément, Pravossoudovitch Yann
 * @version 1.0
 */
public class MatiereDAO extends DAO<Matiere> {
    
    // Instanciation d'un objet unique de type MatiereDAO
    private static final MatiereDAO instance = new MatiereDAO();
    
    /**
     * Méthode permettant de récupérer l'objet unique de type MatiereDAO
     * @return MatiereDAO - Instance unique de l'objet MatiereDAO
     */
    public final static MatiereDAO getInstance() {
        return instance;
    }

    /**
     * M√©thode qui ex√©cute une requ√™te d'ajout d'une nouvelle mati√®re dans la base de donn√©es.
     * Cette m√©thode red√©finit la m√©thode create(T obj) de la superclasse DAO.
     * @author La√´titia Vigroux
     * @author Ophelie Mak
     * @exception SQLException
     * @param m Objet Mati√®re qui doit √™tre mapp√© dans la base
     * @return Boolean - True (Vrai) si l'insertion s'est d√©roul√©e correctement, False (Faux) si elle n'a pas pu √™tre effectu√©e
     * @version 1.0
     */
    public boolean create(Matiere m) {
        boolean ok = true; // Vaut True si l'insertion s'est d√©roul√©e correctement, False sinon
        try {
                // Cr√©ation et ex√©cution de la requ√™te d'ajout d'une nouvelle mati√®re
                PreparedStatement prepare = this.connect.prepareStatement(
                    "INSERT INTO matiere VALUES(?, ?, ?, ?, ?)");
            prepare.setString(1, m.getCode());
            prepare.setString(2, m.getUE().getCodeUE());
            prepare.setString(3, m.getNom());
            prepare.setString(4, m.getDescription());
            prepare.setInt(5, m.getCoeff());

            prepare.executeUpdate();
            }
        catch (SQLException e) {
            // Si exception, on indique que l'insertion ne s'est pas d√©roul√©e correctement
            ok = false;
        }
        // L'ajout s'est bien d√©roul√© si 1 ligne a √©t√© cr√©√©e dans la base
        return ok;
    }

    /**
     * M√©thode qui ex√©cute une requ√™te de mise √† jour d'un enregistrement de la table 'matiere' dans la base de donn√©es.
     * Cette m√©thode red√©fint la m√©thode update(T obj) de la superclasse DAO.
     * @author La√´titia Vigroux
     * @exception SQLException
     * @param m Objet Matiere qui doit √™tre mapp√© pour mettre √† jour la ligne correspondante dans la base
     * @return Boolean - True (Vrai) si la mise √† jour s'est d√©roul√©e correctement, False (Faux) si elle n'a pas pu √™tre effectu√©e
     * @version 1.0
     */
    public boolean update(Matiere m) {
        boolean ok = true; // Vaut True si la mise √† jour s'est correctement d√©roul√©e, False sinon
        try {
            // Exc√©cution de la requ√™te de mise √† jour du code de l'UE de la mati√®re m
            this.connect.createStatement().executeUpdate(
                            "UPDATE matiere " +
                            "SET code_UE='" + m.getUE().getCodeUE() + "' " +
                            "WHERE code_matiere=" + m.getCode());

            // Exc√©cution de la requ√™te de mise √† jour du nom la mati√®re m
            this.connect.createStatement().executeUpdate(
                            "UPDATE matiere " +
                            "SET nom_matiere='" + m.getNom() + "' " +
                            "WHERE code_matiere=" + m.getCode());
            
            // Exc√©cution de la requ√™te de mise √† jour de la description de la mati√®re m
            this.connect.createStatement().executeUpdate(
                            "UPDATE matiere " +
                            "SET description='" + m.getDescription() + "' " +
                            "WHERE code_matiere=" + m.getCode());
            
            // Exc√©cution de la requ√™te de mise √† jour du coefficient de la mati√®re m
            this.connect.createStatement().executeUpdate(
                            "UPDATE matiere " +
                            "SET coefficient=" + m.getCoeff() + " " +
                            "WHERE code_matiere=" + m.getCode());
        } catch (SQLException e) {
            // Si exception, on indique que la mise √† jour ne s'est pas d√©roul√©e correctement
            ok = false;
        }
        
        return ok;
    }

    /**
     * M√©thode qui recherche dans la base de donn√©es l'enregistrement correspondant
     * √† la mati√®re m en param√®tre et retourne les r√©sultats sous forme d'un objet Matiere.
     * @author La√´titia Vigroux
     * @param m Objet Matiere √† rechercher dans la base de donn√©es
     * @return Matiere - Objet Matiere cr√©√© √† partir des r√©sultats trouv√©s dans la base
     * @version 1.0
     */
    public Matiere find(Matiere m) {
        Matiere mat=null; // Matiere retourn√©e par la m√©thode
        try {
            // Requ√™te de s√©lection des informations dans la table mati√®re
            ResultSet result = this.connect.createStatement().executeQuery(
                    "SELECT * FROM matiere " +
                    "WHERE code_matiere = '" + m.getCode() + "'");

            if (result.first()) {
                // Cr√©ation de l'objet Matiere avec les informations trouv√©es dans la base
                UE u = new UE(result.getString("code_UE"),null);
                mat = new Matiere (result.getString("code_matiere"),
                                   result.getString("nom_matiere"),
                                   result.getString("description"),
                                   result.getInt("coefficient"),u);

                // Recherche des types d'enseignements de cette matiere
                result = this.connect.createStatement().executeQuery(
                            "SELECT T.nom_type_enseignement," +
                                   "T.nb_heures_enseignement," +
                                   "T.nb_heures_equivalentTD " +
                            "FROM type_enseignement T, enseignement E " +
                            "WHERE T.nom_type_enseignement = E.nom_type_enseignement " +
                            "AND E.code_matiere = '" + mat.getCode() + "'" +
                            "GROUP by T.nom_type_enseignement," +
                                     "T.nb_heures_enseignement," +
                                     "T.nb_heures_equivalentTD");

                // Cr√©ation des types d'enseignement et stockage dans une liste
                ArrayList<TypeEnseignement> list = new ArrayList ();
                while (result.next()) {
                    list.add(new TypeEnseignement (result.getString("nom_type_enseignement"),
                                                   result.getDouble("nb_heures_enseignement"),
                                                   result.getDouble("nb_heures_equivalentTD")));
                }

                // Ajout de cette liste √† la mati√®re cr√©√©e
                mat.setTypeEns(list);
            }
            
        } catch (SQLException ex) {
            // Si exception, la m√©thode retourne l'objet Matiere initial
            mat = m;
        }
        return mat;
    }

    /**
     * M√©thode qui ex√©cute une requ√™te de suppression d'une mati√®re dans la base de donn√©es.
     * Cette m√©thode red√©finit la m√©thode find(T obj) de la superclasse DAO.
     * @author La√´titia Vigroux
     * @exception SQLException
     * @param m Objet Matiere dont l'enregistrement correspondant dans la base doit √™tre supprim√©
     * @return Boolean - True (Vrai) si la suppression s'est bien d√©roul√©e, False (Faux) si elle n'a pas pu √™tre effectu√©e
     * @version 1.0
     */
    public boolean delete(Matiere m) {
        boolean ok = true; // Vaut True si la suppression s'est d√©roul√©e correctement, False sinon
        try {
            // Cr√©ation et ex√©cution de la requ√™te de suppression
            this.connect.createStatement().executeUpdate(
                            "DELETE FROM matiere " +
                            "WHERE code_matiere ='" + m.getCode() + "'");
        }
        catch (SQLException e) {
            // Si exception, on indique que la suppression ne s'est pas d√©roul√©e correctement
            ok = false;
        }
        
        // La suppression s'est bien d√©roul√©e lorsqu'1 seule ligne a √©t√© supprim√©e de la base
        return ok;
    }

    /**
     * M√©thode qui :
     *      1) r√©cup√®re l'ensemble des mati√®res de la table correspondante dans la base
     *      2) les mappe en objet java Matiere
     *      3) les stocke dans une liste d'ojbets Matiere
     * @author La√´titia Vigroux
     * @exception SQLException
     * @return ArrayList<Matiere> - Liste des mati√®res stock√©es dans la base
     * @version 1.0
     */
    public ArrayList<Matiere> getListe() {

        ArrayList<Matiere> list = new ArrayList();

        try {
            // Requ√™te de s√©lection de l'ensemble des mati√®res de la base
            ResultSet result = this.connect.createStatement().executeQuery("SELECT * FROM Matiere");

            // Ajout des mati√®res dans la liste
            while (result.next()) {
                UE u = new UE(result.getString("code_UE"),null);
                list.add(new Matiere (result.getString("code_matiere"),
                                      result.getString("nom_matiere"),
                                      result.getString("description"),
                                      result.getInt("coefficient"),u)
                         );
            }

            // Recherche des types d'enseignements des mati√®res
            for (Integer i=0; i<list.size(); i++) {

                // Recherche des types d'enseignements de la mati√®re parcourue dans la liste
                result = this.connect.createStatement().executeQuery(
                            "SELECT T.nom_type_enseignement," +
                                   "T.nb_heures_enseignement," +
                                   "T.nb_heures_equivalentTD " +
                            "FROM type_enseignement T, enseignement E " +
                            "WHERE T.nom_type_enseignement = E.nom_type_enseignement " +
                            "AND E.code_matiere = '" + list.get(i).getCode() + "'" +
                            "GROUP by T.nom_type_enseignement," +
                                     "T.nb_heures_enseignement," +
                                     "T.nb_heures_equivalentTD");

                // Cr√©ation des types d'enseignement et stockage dans une liste
                ArrayList<TypeEnseignement> type = new ArrayList ();
                while (result.next()) {
                    type.add(new TypeEnseignement (result.getString("nom_type_enseignement"),
                                                   result.getDouble("nb_heures_enseignement"),
                                                   result.getDouble("nb_heures_equivalentTD")));
                }

                // Ajout de cette liste √† la mati√®re cr√©√©e
                list.get(i).setTypeEns(type);
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public String getNewCodeMatiere () {
        String code = "";
        try {
            // Recherche du code mati√®re le plus √©lev√©
            ResultSet result = this.connect.createStatement().executeQuery(
                        "SELECT MAX(code_matiere) AS code FROM matiere");
            
            if (result.first()) {
                // R√©cup√©ration du code trouv√©
                code = result.getString("code");
                // Incr√©mentation de la valeur enti√®re de ce code de 1
                Integer temp = Integer.parseInt(code) + 1;
                // Re conversion du code en cha√Æne de 4 caract√®res
                if (temp < 10) {
                    code = "000";
                }
                else if (temp <100) {
                    code = "00";
                }
                else if (temp < 1000) {
                    code = "000";
                }
                code = code + temp.toString();
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
        }
        return code;
    }

    /**
     * M√©thode qui permet de retourner la liste des mati√®res associ√©es √† l'UE
     * dont le code est en param√®tre. Les objets Matiere de la liste sont renseign√©s
     * par tous leurs attributs.
     * @author La√´titia Vigroux
     * @author Ophelie Mak
     * @param ue Code de l'UE pour laquelle on veut les mati√®res associ√©es
     * @return ArrayList<Matiere> - Liste des objets Matiere associ√©s √† l'UE en param√®tre
     * @version 1.0
     */
    public ArrayList<Matiere> getMatiereByUE (String ue) {
        ArrayList<Matiere> list = new ArrayList(); // Liste √† retourner
        try {
            // Requ√™te de s√©lection des mati√®res selon l'UE donn√©e
            ResultSet result = this.connect.createStatement().executeQuery(
                                "SELECT * FROM matiere " +
                                "WHERE code_ue = '" + ue + "'");

            // Remplissage de la liste des mati√®res
            while (result.next()) {
                UE u = new UE(result.getString("code_UE"),null);
                list.add(new Matiere (result.getString("code_matiere"),
                                      result.getString("nom_matiere"),
                                      result.getString("description"),
                                      result.getInt("coefficient"),u
                                     ));
            }
        }
        catch (SQLException e) {
            // Si exception, on renvoie la liste vide
            list.clear();
        }
        return list;
    }

    @Override
    public boolean update(Matiere ancien, Matiere nouveau) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
